[
["index.html", "STAT 545 @ UBC: Class Meeting Guide 2019/20 About This Guide", " STAT 545 @ UBC: Class Meeting Guide 2019/20 Vincenzo Coia and Firas Moosvi 2019-08-31 About This Guide Welcome to the class meeting (or “lecture”) guide for STAT 545A and STAT 547M at UBC for the 2019/20 academic year! This guide organizes what we will be doing in each class meeting. So you can expect it to be updated regularly – in fact, the date listed above is the last time this guide was updated. If you’re looking for the list of tutorials written by Jenny Bryan, you can find those in the bookdown book found at stat545.com. "],
["introduction-to-stat-545-and-github.html", "Class Meeting 1 Introduction to STAT 545 and GitHub 1.1 Learning Objectives 1.2 Your Turn: GitHub activity 1.3 About Version Control 1.4 Live-Coding: Making a new repo 1.5 Commits 1.6 Live-Coding: Branching and Merging 1.7 Collaboration with GitHub 1.8 Learning Objectives: Collaboration with GitHub 1.9 Resources 1.10 Demonstration 1.11 Quiz 1.12 To do before next time", " Class Meeting 1 Introduction to STAT 545 and GitHub By the end of today’s class, students are expected to be able to: List 4 ways to get help in this course Create and comment on GitHub Issues 1.1 Learning Objectives The concepts we’ll be looking at are: Commits Diffs Commit History Branches Merging Merge Conflicts Specifically, by the end of today’s class, students are expected to be able to: Describe the difference between git and GitHub, and name similar software Edit plain text files on different branches on GitHub Navigate the commit history of various repository branches on GitHub Visualize a tree diagram of commits across branches Merge repository branches via pull requests on GitHub, resolving merge conflicts if necessary GitHub offers a nice tutorial on getting started with GitHub that you might find useful. 1.2 Your Turn: GitHub activity 5 minute timer. Register for a free account on github.com. You’ll be using this account for the duration of the course. Want detailed instructions? See happygitwithr: Section 5 Complete this survey. Navigate to the Announcements repository. Click Watch on the upper-right corner of the repo This is so that you get email notifications whenever an announcement is posted (under the “Issues” tab). Go to the Issues section of the repository, and comment on the Issue I created called “Introduce yourself!”. In the comment, say who you are, and greet the person above you – be sure to tag them by their username using @username. Please put up a profile photo – it makes the STAT 545 community more personable. You can do this from your profile homepage. OPTIONAL: Register for the Student Developer Pack with GitHub for a bunch of free perks for students! 1.3 About Version Control What is version control? Why bother with version control? Don’t fret removing stuff Leave a breadcrumb trail for troubleshooting “Undo” to a previous state Helps you define your work … What software is associated with version control? git, subversion, GitHub, GitLab, Bitbucket, … 1.4 Live-Coding: Making a new repo To demonstrate version control concepts, we’ll create a new GitHub repository, which will showcase our markdown exploration. Create a new repository for your homework. Counts towards participation, so please keep this repo until the course is complete. Say YES to initializing with a README. Edit the README with something descriptive, like: This repo is part of a STAT 545 exercise to explore GitHub and markdown. Commit the changes, adding a commit message. Drag and drop the .md, .html, and .pdf files that you made earlier in class onto the main repo page. Explore the files in your repo. What’s viewable? What’s not? Food for thought: Jenny Bryan on repo browsability: happygitwithr repo-browsability. You should now have a repo with a README file, and your .md, .pdf, and .html files from before. 1.5 Commits Commits, diffs, and commit history. 1.6 Live-Coding: Branching and Merging The notion of branching and merging shows up seemingly everywhere in version control. You’ll encounter merge conflicts, too. To demonstrate concepts, let’s look at a repository branch. There are other types of branches, as we’ll see. For more info on this, see the GitHub documentation. NOTE: I’m deferring the motivation for repo branching until later. Create a new branch via the home page of your repo (find the “branch” button). Call it test1. To the README on the test1 branch, add a relative link to the other .md file in the repo (using markdown syntax). Explore: switch between branches to see that the repo structure is different. Diagram of commit history for both branches. Merge the branch to “master”. Part 2: Make a new branch called test2. Edit line 1 of the README on both branches to something different in both cases. Try merging. You’ll get a merge conflict – go ahead and resolve it, then merge. 1.7 Collaboration with GitHub 1.8 Learning Objectives: Collaboration with GitHub The primary focus here is learning about leveraging GitHub’s version control for collaboration. The concepts are: GitHub Pages Forking Pull Request Specifically, by the end of today’s class, students are expected to: Be able to make a basic website out of your participation repository using GitHub Pages Know roughly what the above concepts are about 1.9 Resources The GitHub documentation is perhaps the best place to learn about these outside of class: GitHub Pages Forking happygitwithr: fork is also a good resource. Pull Request 1.10 Demonstration For participation marks, by the end of this demonstration: you’ll have a GitHub pages website set up for your participation repo you don’t need to have anything for the forking exercise! Checklist: Set up a basic “GitHub pages” website with your participation repo: Go to “settings” on your repo. Scroll down to “GitHub Pages” Under “Source”, click the “None” drop-down button, and select the branch you want to turn into a website. Forking a repo: Let’s try forking the Classroom repo. We’ll make a change, and will submit a pull request. 1.11 Quiz (to make??) Rank? What are four ways to ask for help in this course? In real life? What is a github repository? Org? Issue? 1.12 To do before next time Please fill out this survey, so that we can match you to your GitHub account. Remember to bring your laptop to every class, as we will have live-coding activities. Install the software stack for this course, as indicated below. Having trouble? Our wonderful TA’s are here to help you during office hours. Sign up for a GitHub account on github.com Install R and RStudio. R here: https://cloud.r-project.org RStudio here: https://www.rstudio.com/products/rstudio/download/preview/ Commentary on installing this stuff can be found at stat545.com: r-rstudio-install Install git. See happygitwithr: Section 7 You’ll need to work with the command line. LaTeX? "],
["introduction-to-r.html", "Class Meeting 2 Introduction to R 2.1 Learning Objectives 2.2 Resources: 2.3 About R 2.4 Demonstration 2.5 R Markdown 2.6 Learning Objectives 2.7 Resources 2.8 Getting Started 2.9 Demonstration 2.10 To do before next class", " Class Meeting 2 Introduction to R Today’s topics are: Getting familiar with R To participate in today’s lecture, you should have: R and RStudio installed Optionally, LaTeX installed for outputting to pdf. A participation repo to put in-class work 2.1 Learning Objectives By the end of today’s class, students are expected to be able to: Have a sense of the capabilities, and pros and cons, of R Write an R script to perform simple calculations Describe the main idea of vectorization Access the R documentation on an as-needed basis 2.2 Resources: We’ll be roughly following the stat545.com: hello r page for exploring R. adv-r: data structures is a more comprehensive version of exploring R objects. For those already experience with R: I recommend you look this chapter over. You’ll probably learn something new. For those new to R, who want the depth, read until the end of the “Vectors” section. Want to practice programming in R? Check out R Swirl for interactive lessons. 2.3 About R Why R? Some points taken from adv-r: intro: Free, platform-wide Open source Comprehensive set of “add on” packages for analysis Huge community … Strengths that tend to be specific to R: Naturally handles data (and therefore its analysis) Vectorization .. Its downfalls? Slow To learners, seems “quirky” (due to reliance on “metaprogramming”) S3 OO objects &amp; methods not always transparent … Alternatives for data analysis? python is becoming more prominent in the data science community. faster, more “all-purpose” tends to handle text better jupyter notebooks instead of RStudio and R Markdown Methods for interacting with R (I’ll demo basic calculations) Rstudio. NOTE: R is not RStudio! RStudio is an IDE. The STAT 545 (and largely the world’s) choice! “R console” Terminal/ESS … 2.4 Demonstration Set up shop to follow along: Open RStudio. Either: Ideally, download and open the template R script (if you’re online); OR Start a new R Script. (File -&gt; New File -&gt; R Script) To get participation marks for this activity: Work with me as we fill in the worksheet. Remember, you’re not graded on correctness, just on the attempt! Upload your worksheet to your STAT 545 participation repo. The completed worksheet can be found here. 2.5 R Markdown 2.6 Learning Objectives Create an R Markdown (Rmd) document and render it to md/html/pdf Write basic equations in Rmd using LaTeX Style an Rmd document by editing the YAML header Demonstrate at least two Rmd code chunk options Informatively choose between writing an R script/Rmd/R Notebook. 2.7 Resources Here are some resources that are well-aligned with today’s goals: The stat545: Rmd test drive. Read this if you missed something from today’s class. The Rmd website has a fantastic walk-through tutorial that gives a great overview of R Markdown. The following lessons parallel today’s content: Lessons 1-4 (Intro - Inline Code) Lessons 9-10 (Output Formats - Notebooks) Here are resources that are great to reference: The official Rmd cheatsheet has seemingly everything bundled together in a concise way. An updated list of options for the YAML header can be found in the rmd book: html-document To dig deeper into any (?) aspect of R Markdown, check out the free R Markdown book (also listed on the course syllabus). 2.8 Getting Started You’ll need to install R Markdown. To do so, in any R console, run the following: install.packages(&#39;rmarkdown&#39;) 2.9 Demonstration Let’s play with Rmd. No need to submit anything for participation marks! We’ll do that next time when we explore data frames. Create a new Rmd document: File -&gt; New File -&gt; R Markdown… Title: “Data Frame Exploration”. Notice the differences from regular markdown: YAML header, code chunks! Save it – I’ll call it cm003-exercise-df. Click Knit. Try other outputs. Try LaTeX equations. Try inserting new chunks of code. Try changing the theme with YAML. Try changing chunk options. Try making an R Notebook. R script/Rmd/R Notebook – which to use? 2.10 To do before next class To participate in tomorrow’s lecture, you should: Ensure you follow the steps to set up your “participation” repository. Complete the course survey, if you haven’t already. You MUST do this in order to do your first assignment! You might want to try installing LaTeX, if you want to be able to output to pdf and are not able to. "],
["authoring.html", "Class Meeting 3 Authoring 3.1 Learning Objectives: Plain Text 3.2 Orientation to Plain Text 3.3 Markdown Crash Course 3.4 Presentations 3.5 If we finish early", " Class Meeting 3 Authoring Today, we’ll be looking at writing documents. md, Rmd, presentations. bookdown? blogdown? To participate in today’s lecture, you should have: A GitHub account RStudio installed 3.1 Learning Objectives: Plain Text By the end of today’s class, students are expected to be able to: Name three key uses of plain text, and some types of plain text for each Author basic documents in ordinary markdown (easier than you think!) with RStudio Render a markdown document to html and pdf using RStudio Choose whether html or pdf is an appropriate output 3.2 Orientation to Plain Text Three uses of plain text relevant to data analytic work: authoring data storage scripts Motivation for plain text: authoring: Delegating the formatting saves time and is distraction-free Automate numbering Automate changes to the formatting Less error-prone (eg. matching font sizes) … data storage and scripts: always machine readable Types of plain text for each, with typical file extensions. STAT 545 focusses on those in bold: authoring markdown (.md) (and family!) LaTeX (.tex) You could say HTML, too… data storage csv/comma-separated values (.csv) tsv/tab-separated values (.tsv) JSON (.json) XML (.xml) (although not its only use) scripts R (.r) – Next week python (.py) javascript (.js) Some noteworthy things: Rich text is different from syntax highlighting The file viewer is independent from the file Less so with proprietary software such as Word. With plain text, the file extension doesn’t really matter. 3.3 Markdown Crash Course Live coding activity: Open RStudio, and open a new text file. Save the file, and call it md_explorer.md Add content to the document, using some markdown syntax such as: Headers Bold, Italics Code font Hyperlinks Click Preview to convert the md file to HTML. Try pdf, too! Which to use? In general: printing to the page, pdf. Viewing on the screen, HTML. Notable “flavours”/extensions to the basic markdown: GitHub-flavoured Markdown (Assignment 1) R Markdown (A future lesson) Resources: Original Markdown syntax. Cheatsheet for md and gh-flavoured md. Tutorial for learning markdown. 3.4 Presentations ioslides, xaringan, etc. 3.5 If we finish early 3.5.1 csv files Their use for tabular data Their structure Editing them by hand 3.5.2 More Markdown Let’s learn more about markdown, with a think-pair-share activity. Form groups of size n (determined in-class) “Think”-iteration: Each person is responsible for learning about a different type of markdown formatting, for 3 minutes: Inserting images Lists Blockquotes Code blocks “Pair”-iteration: For max 1 minute per person, each person either: teaches the other group members how to use the formatting they learned, OR if you’re lost, ask your group members for help on the basics. Don’t feel bad! This happens and is normal, and is also useful for your team members. “Share”-iteration: Volunteer to share something that you learned! "],
["the-version-control-workflow.html", "Class Meeting 4 The version control workflow 4.1 Exploring data frames (in Rmd!) 4.2 Learning Objectives 4.3 Resources 4.4 Getting Started 4.5 Demonstration 4.6 Working locally with git 4.7 Learning Objectives 4.8 Resources 4.9 Getting Started 4.10 Demonstration 4.11 Adopting git in your workflow 4.12 If there’s time remaining", " Class Meeting 4 The version control workflow Today’s topics are: Exploring data frames (in Rmd!) Working locally with git To participate in today’s class, you’ll need: git installed A GitHub account RStudio installed Access to the command line (can do through RStudio) 4.1 Exploring data frames (in Rmd!) 4.2 Learning Objectives In our R exploration last time, we saw one way to bundle together multiple pieces of information: vectors. Now, we’ll turn to data frames. By the end of this lesson, students are expected to be able to: Describe common properties of “built-in” R data frames using R Extract columns from a data frame 4.3 Resources This lesson closely mirrors the stat545.com: care-feeding-data page for exploring data frames. 4.4 Getting Started We’ll be working with the gapminder data set. To access it, in any R console, run the following: install.packages(&#39;gapminder&#39;) 4.5 Demonstration FIRST, let’s ensure your participation repo is setup. Go to your github.com profile. If you have a participation repository, but it’s not called STAT545_participation, I’ll show you how to rename it. If you DON’T have a participation repository set up, let’s do that (I’ll make one, too). Now, I’ve started a “cleaned up” version of the Rmd file we were exploring last time. Find it on GitHub! Let’s build this up, and submit the result to your participation repository for your participation assessment. 4.6 Working locally with git 4.7 Learning Objectives The concepts we’ll be touching on here are: clone stage commit (again!) pull/push By the end of the lesson, students are expected to be able to: Demonstrate the above concepts using RStudio’s git client with your participation GitHub repository. 4.8 Resources Want to try a similar lesson to today’s, but on your own? Follow along with happygitwithr: rstudio-git-github, which is closely aligned with the goals of this lesson. Want to learn more, above and beyond what’s done in class? Take a look at these: Excellent resource by GitHub on how to “undo” almost anything (including “going back” to a previous state). 4.9 Getting Started You’ll need to config your git using the command line. Your RStudio will probably be able to “find” git. But if it can’t, you’ll encounter errors. See happygitwithr: see-git for help. Optional (but recommended): After class, you might want to cache your credentials so that you don’t have to keep inserting your password. 4.10 Demonstration The end product of this demonstration is a locally modified version of our data frame exploration, pushed to GitHub. What are “git clients”? We’ll be using the git client built-in to RStudio. Cloning: Concept (remember “branches”?) Practice with your participation repo. I’ll be using the Classroom repo. In RStudio, File -&gt; New Project -&gt; Version Control -&gt; Git. You should see a Git tab in RStudio, upper-right corner window. If not, see happygitwithr: see-git for help. Take a look at the files you just downloaded! By the way: What’s an RStudio “project”? We don’t need to edit a file with RStudio to use its git client! File doesn’t need to have anything to do with R, either. Staging and committing: Concept Modify your Rmd exploration from earlier (just add a new line). Stage and commit Push/Pull: Concept Try pushing! 4.11 Adopting git in your workflow __Before the world of git:__ Save perpetually. __After embracing git:__ Save perpetually, commit often, push in case of fire. Need help? If you’re encountering problems, try: As always, google search. Burn it all down. There’s even an xkcd comic on this. The git documentation is not friendly. There’s even a parody on it. 4.12 If there’s time remaining Concepts related to getting help in R (or with other computational problems): Google the error message (works most of the time) Write a question using a MWE. You’ll solve it yourself most of the time. Post question to thread such as SO. “Lab” "],
["intro-to-data-wrangling-part-i.html", "Class Meeting 5 Intro to data wrangling, Part I 5.1 Review, and Looking Ahead 5.2 Today’s Lessons 5.3 Resources 5.4 Participation 5.5 Intro to dplyr syntax 5.6 The dplyr advantage 5.7 Small break 5.8 Relational/Comparison and Logical Operators in R 5.9 If there’s time remaining", " Class Meeting 5 Intro to data wrangling, Part I 5.1 Review, and Looking Ahead We’ve done a lot so far! Let’s recap/review. Here are the main concepts we’ve covered: git and GitHub concepts and how-to Basics of R Basics of authoring in markdown (with various flavours) RStudio features: as a text editor (.md, .R, .Rmd, etc…) as containing the R machinery (running code in the console) as a command line tool as a git client In short, we’ve covered the foundation of key tools for data analysis. For the next few weeks, we’re going to focus more on the data itself, for the purpose of exploratory data analysis. Specifically, and not in this particular order, Data wrangling Data computations Plotting 5.2 Today’s Lessons Today we’ll introduce the dplyr package. Specifically, we’ll look at these three lessons: Intro to dplyr syntax The dplyr advantage Relational/comparison and logical operators in R 5.3 Resources All three of today’s lessons are closely aligned to the stat545: dplyr-intro. More detail can be found in the r4ds: transform chapter, up until and including the select() section. Section 5.2 also elaborates on relational/comparison and logical operators in R Here are some supplementary resources: A similar resource to the r4ds one above is the intro to dplyr vignette, up until and including the select() section. Want to read more about piping? See r4ds: pipes. 5.4 Participation To get participation points for today, we’ll be filling out the cm005-exercise.Rmd file, and adding it to your participation repo. Let’s get set up: I made it easier to download this time: just click the upper-right drop-down menu of the html version. Download the .Rmd version to your local participation repo. You should have it cloned to your local machine (aka your computer) from last time. Optional, but recommended: Stage and commit the Rmd file (you can do this through RStudio). You can still get participation marks by uploading the final files to GitHub. 5.5 Intro to dplyr syntax 5.5.1 Learning Objectives Here are the concepts we’ll be exploring in this lesson: tidyverse dplyr functions: select arrange filter piping By the end of this lesson, students are expected to be able to: subset and rearrange data with dplyr use piping (%&gt;%) when implementing function chains 5.5.2 Preamble Let’s talk about: The history of dplyr: plyr tibbles are a special type of data frame the tidyverse 5.5.3 Demonstration Let’s get started with the exercise: Open RStudio, and download the tidyverse meta-package by executing install.packages(&quot;tidyverse&quot;) into the R console. Optional: open the STAT545_participation RStudio project in RStudio. With RStudio, open the cm005-exercise.Rmd file you downloaded and committed earlier. Follow the instructions in the .Rmd file. Knit, commit, push. 5.6 The dplyr advantage 5.6.1 Learning Objectives By the end of this lesson, students are expected to be able to: Have a sense of why dplyr is advantageous compared to the “base R” way with respect to good coding practice. Why? Having this in the back of your mind will help you identify qualities of and produce a readable analysis. 5.6.2 Compare base R to dplyr Let’s talk about these concepts: Metaprogramming. Hadley Wickham says it best in adv-r: meta: you trade precision for concision. Here’s the example he gives: subset(diamonds, x == 0 &amp; y == 0 &amp; z == 0), vs. diamonds[diamonds$x == 0 &amp; diamonds$y == 0 &amp; diamonds$z == 0, ] Pure functions. I=O, and does not impact workspace. Self-documenting code. This is where the tidyverse shines. Example of dplyr vs base R: gapminder %&gt;% filter(country == &quot;Cambodia&quot;) %&gt;% select(year, lifeExp) vs. gapminder[gapminder$country == &quot;Cambodia&quot;, c(&quot;year&quot;, &quot;lifeExp&quot;)] No need to take excerpts. Wrangle with dplyr first, then pipe into a plot/analysis. OR, use the subset argument that’s often offered by R functions like lm(). Especially don’t use magic numbers to subset! Note that you need to use the assignment operator to store changes! 5.7 Small break Here are some things you might choose to do on this break: Talk with a TA, Vincenzo, or your neighbour(s) about the content so far. Fill out the challenge on the cm005-exercise.Rmd file. Work on an assignment. 5.8 Relational/Comparison and Logical Operators in R 5.8.1 Learning Objectives Here are the concepts we’ll be exploring in this lesson: Relational/Comparison operators Logical operators By the end of this lesson, students are expected to be able to: Predict the output of R code containing the above operators. Explain the difference between &amp;/&amp;&amp; and |/||, and name a situation where one should be used over the other. 5.8.2 Demonstration Continue along with the cm005-exercise.Rmd file. 5.9 If there’s time remaining Let’s do the bonus exercises together, in the cm05-exercise.Rmd file. Another “break” "],
["intro-to-data-wrangling-part-ii.html", "Class Meeting 6 Intro to data wrangling, Part II 6.1 Today’s Lessons 6.2 Resources 6.3 Participation", " Class Meeting 6 Intro to data wrangling, Part II 6.1 Today’s Lessons Today’s topic is one-table verbs with dplyr. We’ve already seen select, filter, and arrange. mutate grouped summarize grouped mutate …and their corresponding theoretical function types. 6.2 Resources Concepts from today’s class are closely mirrored by the following resources. Jenny’s tutorial on all the one-table verbs Other resources: Like learning from a textbook? Check out all of r4ds: transform. The intro to dplyr vignette is also a great resource. Resources for specific concepts: To learn more about window functions and how dplyr handles them, see the window-functions vignette for the dplyr package. 6.3 Participation To get participation points for today, we’ll be filling out the cm008-exercise.Rmd file (Rmd, or from html), and adding it to your participation repo. Let’s take time to get set up: Download the file as .Rmd. Move the file to your local participation repo. Open the .Rmd file, and change the output type to github_document. Optional, but recommended: Stage and commit the Rmd file (you can do this through RStudio). - You can still get participation marks by uploading the final files to GitHub. "],
["introduction-to-plotting-with-ggplot2-part-i.html", "Class Meeting 7 Introduction to plotting with ggplot2, Part I 7.1 Resources 7.2 Participation 7.3 Orientation to statistical graphics 7.4 The grammar of graphics 7.5 Plotting with x and y aesthetics", " Class Meeting 7 Introduction to plotting with ggplot2, Part I Today’s lessons are: Orientation to statistical graphics The grammar of graphics Plotting with x and y aesthetics 7.1 Resources Concepts from today’s class (and next class) are closely mirrored by the following resources, which introduce ggplot2, although are organized in different ways for each. The following are good walk-throughs that introduce ggplot2: r4ds: data-vis chapter. Perhaps the most compact “walk-through” style resource. The ggplot2 book, Chapter 2. A bit more comprehensive “walk-through” style resource. Section 1.2 introduces the actual grammar components. Here are some other resources you might find useful: Jenny’s ggplot2 tutorial. Has a lot of examples, but less dialogue. R Graphics Cookbook Good as a reference if you want to learn how to make a specific type of plot. ggplot2 cheatsheet 7.2 Participation To get participation points for today, we’ll be filling out the cm006-exercise.Rmd file, and adding it to your participation repo. Let’s get set up: To download the file the easy way, just click the upper-right drop-down menu of the html version of the file. Download the .Rmd version to your local participation repo. Open the .Rmd file, and change the output type to html_document, keeping the .md file, too. Optional, but recommended: Stage and commit the Rmd file (you can do this through RStudio). You can still get participation marks by uploading the final files to GitHub. 7.3 Orientation to statistical graphics 7.3.1 Learning Objectives By the end of this lesson, students are expected to be able to: Identify the plotting framework available in R Have a sense of why we’re learning the ggplot2 tool Have a sense of the importance of statistical graphics in communicating information 7.3.2 Discussion There are three main ways you can produce graphics in R. In order of inception, they are base R lattice (an R package) ggplot2 (an R package) Part of the tidyverse Why ggplot2? once fluent, can make most plots up to publication quality standard very quickly. has theoretical underpinning in the “layered grammar of graphics”, which is described in the book by Leland Wilkinson. Stackoverflow was my main source of learning. Google what you’re trying to do, and persevere. You can do it. Jenny Bryan on statistical graphics: A picture is worth 1000 words More philosophy on graphics Comparing base R/lattice/ggplot2 The learning curve 7.4 The grammar of graphics 7.4.1 Learning Objectives By the end of this lesson, students are expected to be able to: Identify the seven components of the grammar of graphics underlying ggplot2 Have a sense of what the seven components are 7.4.2 Discussion Leland Wilkinson lays out the grammar of graphics in his book. They define the “space of statistical graphics”. The grammar components, adapted to ggplot2 (gg = grammar of graphics), where the bold ones are necessary to specify for every plot: Data Aesthetic mappings Geometric objects Scales Statistical transformations Coordinate system Facet specification 7.5 Plotting with x and y aesthetics 7.5.1 Learning Objectives This live-coding-based lesson focusses on: using the x and y aesthetic mappings, while using different geometric objects to explore various plot “types”. By the end of this lesson, students are expected to be able to: Create a variety of “plot types” using ggplot2 under the following situations: two numeric variables one numeric variable one numeric, one categorical variable 7.5.2 Demonstration Note: We’ll be jumping straight into the ggplot() function, instead of the more limited qplot() function. Follow along with the cm006-exercise.Rmd file we downloaded earlier. "],
["introduction-to-plotting-with-ggplot2-part-ii.html", "Class Meeting 8 Introduction to plotting with ggplot2, Part II 8.1 Today", " Class Meeting 8 Introduction to plotting with ggplot2, Part II 8.1 Today Continue with ggplot2. This time, exploration of aesthetics (and facetting). Continue with geom exploration if time permits. Links to cm007 exercise file: download from Rmd or html. "],
["tidy-data-and-pivoting.html", "Class Meeting 9 Tidy Data and Pivoting 9.1 Review, and Looking Ahead 9.2 Today’s Lessons 9.3 Resources 9.4 Participation 9.5 Reading and Writing data 9.6 Tidy Data", " Class Meeting 9 Tidy Data and Pivoting 9.1 Review, and Looking Ahead For the past two weeks, we’ve been looking at “clean” exploratory data analysis by: Wrangling single data frames with dplyr Making plots of that data with ggplot2 This is a powerful framework for drawing information from data. This week, we’ll focus on data not in an immediately ready-to-use format: Today: data reshaping Thursday: joining two tables (Rashedul to take the lead) Starting next week, the rest of the course will look at more advanced versions of what we’ve seen: R programming Factors Plotting (including plotly). We’ll finish with a discussion on the model-fitting paradigm in R, and the broom package. 9.2 Today’s Lessons Today’s lessons are: readr: Reading and writing data into and out of R tidyr: Tidying and untidying data Time permitting: other tidyr goodies 9.3 Resources Concepts from today’s class are closely mirrored by Jenny Bryan’s LOTR tidy data lesson. 9.4 Participation To get participation points for today, fill out the cm009-exercise.Rmd file with the class (get it from Rmd, or from html), and add it to your participation repo. 9.5 Reading and Writing data 9.5.1 Working Directory R has a notion of “working directory”. You can get with getwd(), set (with caution) with setwd(). 9.5.2 The functions Let’s see an example of how tabular data are stored: csv example: gapminder tsv example: LOTR Reading and writing csv’s Tool Reading Writing Base R read.csv() write.csv() tidyverse (readr) read_csv() write_csv() Reading and writing tsv’s Tool Reading Writing Base R read.delim() write.table(sep=&quot;\\t&quot;) tidyverse (readr) read_tsv() write_tsv() Reading and writing delimited files in general Tool Reading Writing Base R read.delim() write.table() tidyverse (readr) read_delim() write_delim() With Base R: beware the factors with read.csv()! 9.5.3 Making tibbles within R Base R: data.frame() function. Tidyverse version: tibble() function from tibble package. Truly manual construction of tibbles: tribble() from the tibble package. 9.6 Tidy Data 9.6.1 Learning Objectives Here are the concepts we’ll be exploring in this lesson: tidy data gather spread By the end of this lesson, students are expected to be able to: identify when data are tidy, and when they are not. when either form is useful. use the tidy::gather() and tidyr::spread() functions to convert between tidy and untidy data 9.6.2 Tidy Data We’ll look at Jenny’s intro page for an example of tidy/untidy data. 9.6.3 gather and spread History: Data reshaping has not been the most natural thing to program. First came the reshape package. Then the reshape2 package. Now the tidyr package makes it easy(er). Spreadsheets like Excel? pivot. Let’s try some exercises. "],
["joining-two-tables.html", "Class Meeting 10 Joining Two Tables", " Class Meeting 10 Joining Two Tables (last year, delivered by Rashedul, resources at https://github.com/Rashedul/stat545_guest_lecture) "],
["advanced-r-programming.html", "Class Meeting 11 Advanced R programming 11.1 Review, and Looking Ahead 11.2 Today’s Lessons 11.3 Resources 11.4 Participation", " Class Meeting 11 Advanced R programming 11.1 Review, and Looking Ahead We’re done with the “core concepts” of data wrangling and data vis, both of which are fundamental to exploratory data analysis (EDA). Now, we’re starting more “specialized” topics for EDA. 11.2 Today’s Lessons Today’s class is on R programming. When we first saw R: we made a script to compute the variance of commute times. we saw that R can handle more than just numbers – it can also handle things like characters and logicals. Today, we’ll aim to cover the following topics (which we’ll call Part I): “Flavours” of R objects Vectors, vectorization, and recycling. Lists If time remains, we’ll move on to Part II: Environments and Scoping 11.3 Resources Part I: Jenny’s Basic R Objects tutorial covers Part I. A more thorough treatment of the topic can be found in adv-r: Data Structures and adv-r: Subsetting. Part II: adv-r: Functions: Lexical Scoping section adv-r: Environments: “Environment Basics” section, and “Function Environments” section (but don’t worry about “binding environments” and “calling environments”). 11.4 Participation Fill out the cm011-exercise.Rmd file, and push it to your participation repo. Links: Rmd, or from html. "],
["be-the-boss-of-your-factors.html", "Class Meeting 12 Be the Boss of your Factors 12.1 Recap 12.2 Today:", " Class Meeting 12 Be the Boss of your Factors — LAST YEAR’S CONTENT BELOW — 12.1 Recap Vectors: a sequence of “entries” of the same data type. Character vectors: an “entry” can contain any amount of characters. Lists: a sequences of “entries” of any type. 12.2 Today: Factors. Dates with lubridate if we get to it (making the lecture on special vectors in general). Worksheet: Rmd, or from html "],
["effective-plotting.html", "Class Meeting 13 Effective Plotting", " Class Meeting 13 Effective Plotting Worksheet: Rmd, from html If we finish the worksheet before the end of class: What makes a plot “publication quality”? Give examples. What is plotting effectiveness? How well the plot conveys the info contained in the data. Impossible to perfect! Hence figure captions. Mantra from Gelman et al: facilitate comparisons, reveal trends. “Let’s Practice What We Preach: Turning Tables into Graphs” by Gelman A, Pasarica C, Dodhia R. The American Statistician, Volume 56, Number 2, 1 May 2002 , pp. 121-130(10). Effectiveness -&gt; theme + grammar -&gt; plot/tooling -&gt; EDA Let’s look at some about what makes a plot effective and ineffective. We’ve seen “show me the data”: Pinhead plot vs. jitter+violin. Beware of overplotting. Three reasons why pie charts suck Declutter To include 0 or not? Jenny Bryan’s discussion "],
["the-model-fitting-paradigm-in-r.html", "Class Meeting 14 The Model-Fitting Paradigm in R 14.1 Today 14.2 Resources 14.3 Break 14.4 Deep Thoughts about Data Analytic Work", " Class Meeting 14 The Model-Fitting Paradigm in R 14.1 Today Worksheet: the model-fitting paradigm in R. Rmd, from html Break to fill out instructor and TA evaluations. “Deep thoughts” on data analytic work 14.2 Resources Jenny’s Deep Thoughts broom vignette If you’re interested in learning more about the actual statistical / machine learning methods for fitting models, I highly recommend the book “An Introduction to Statistical Learning” (freely available online). It uses R, too. 14.3 Break You should have received an email asking to fill out instructor evaluations. Let’s take some time to fill that out. 14.4 Deep Thoughts about Data Analytic Work (“Deep Thoughts” refers to Jack Handley’s skit on Saturday Night Live) 14.4.1 Coding Practices: Naming some people use camelCase, snake_case, or.periods. Functions should be verbs (based on the one thing that it achieves). Objects should be nouns. Functions that return functions should be adverbs. Don’t over-create. The more objects in your global environment there are, the more confusing it will be – especially if you don’t have a consistent rule. Don’t under-create: avoid magic numbers! Bad: x &lt;- rnorm(100) y &lt;- x + rnorm(100) Good: n &lt;- 100 x &lt;- rnorm(n) y &lt;- x + rnorm(n) Disambiguate from left-to-right, not right-to-left. Think tab completion. Bad: canada_gdp and china_gdp. Good: gdp_canada and gdp_china. 14.4.2 Coding Practices: Documenting code Self-documenting code = code that speaks for itself. Write self-documenting code with meaningful variable names, and ideally using the tidyverse. Metaprogramming shines here, too. Base R: mtcars[mtcars$cyl &lt; 8, c(&quot;cyl&quot;, &quot;mpg&quot;)] tidyverse: mtcars %&gt;% filter(cyl &lt; 8) %&gt;% select(cyl, mpg) Think before you comment your code! It’s easy for comments and code to misalign at original writing OR as things shift around. Use comments to describe high-level decisions on the analysis. Bad: # Lag the river discharge twice. Good: # create predictors. Don’t use comments to describe what your code is doing on a low-level. Bad: # make data frame of cylinders less than 8, with variables &#39;cyl&#39; and &#39;mpg&#39; Good: No comment at all. Better: Use the tidyverse. 14.4.3 Coding Practices: The DRY principle DRY = don’t repeat yourself. Instead, Write functions Write functions that do a very specific thing Example of function that does too much: normalize a vector AND possibly compute the location and scale. Some other best practices with functions: Functions should be self-contained, not drawing on global For readability For function (can’t easily export that to it’s own package or other analyses, for example) Write unit tests for the functions (we’ll see testthat) 14.4.4 Coding Practices: Style Guides When writing code, at the very least, it’s important to be consistent with your style. We highly recommend: The pep8 style guide for Python. The tidyverse style guide for R. Sections 4+ are not so relevant yet. Activity: In five minutes: On your own, read over some style rules: a few small ones, or one bigger one. Form groups of 2-4. With your group members, share the following: what you read. your opinion about what you read. if applicable, style that you especially like to follow. Address some in class. 14.4.5 Reproducibility This practice is so important, I’m giving it it’s own section. Jenny Bryan: “If the thought of re-running your analysis makes you ill… you’re not doing it right” Progress is not about stacking bricks. Don’t ever be afraid to re-visiting “earlier” points in the analysis. The concept goes beyond programming, and many argue as to its meaning, but we’re taking it to mean two things as relevant to data analytic work: 1. How easily someone can reproduce output. Example: generating a plot; or a report. Worst case scenario: no source code is available; regenerate from scratch. Best case scenario: output is regenerated with the click of a button. Concepts to live by: Source is real. Output is transient. Source &gt;&gt; Output. Working interactively? Frequently nuke your session and run from the top. It should still work. Don’t save workspace upon closing. Who is this “someone” I speak of? Future you Collaborators Critics Successors (your capstone partners) 2. How easily someone can reproduce your frame of mind / conceptual framework at some point in time. Example: All the code files relating to your thesis. Worst case scenario: No explanations. Best case scneario: README’s concisely summarize what’s present; comments or markdown in reproducible reports outline big-picture logic. Broader examples: Conclusions drawn from an analysis. Understanding of a concept in class. Even taking photos to capture moments in time. Concepts to live by: Avoid technical debt, and document the big-picture structure both within files (comments) and between files (README’s). An unsuspecting data scientist stumbles upon your work. Can they figure out what’s going on? Scenario: how could the following practice be made better? You’re writing code directly to the console, and end up with a plot from your machine learning model, so you click save and use the plot in a report. "],
["stat-547m.html", "STAT 547M", " STAT 547M "],
["functions.html", "Class Meeting 15 (1) Functions", " Class Meeting 15 (1) Functions 15.0.1 Today’s Agenda Rubric Writing your own functions Your analysis is unique! You will likely need your own functions. Use case: purrr. 15.0.2 Resources Concepts from today’s class are closely mirrored by the following resources. stat545.com functions part1, part2, and part3. 15.0.3 Participation To get participation points for today, we’ll be filling out the cm101-exercise.Rmd file. Rmd html. Add this to your participation repo. "],
["be-the-boss-of-your-character-data.html", "Class Meeting 16 (2) Be the boss of your character data 16.1 Announcements 16.2 Agenda 16.3 Worksheet", " Class Meeting 16 (2) Be the boss of your character data — LAST YEAR’S CONTENT BELOW — 16.1 Announcements Fill out class survey if you haven’t already done so in STAT 545A. This allows us to link you to your github username. The link is also available on the course homepage, stat545.com/Classroom. Participation: Can’t attend lecture for some legitimate reason (besides not wanting to come)? Let me know. We won’t look for your commit timestamp for that day, but will still expect you to show that you engaged with the material at some point. Contributing to the discussion boards is also part of participation. 16.2 Agenda Making sense of strings: how to deal with data of class character. We’ll be using the following data that ships with stringr, today’s R package that comes shipped with tidyverse: str(stringr::fruit) ## chr [1:80] &quot;apple&quot; &quot;apricot&quot; &quot;avocado&quot; &quot;banana&quot; &quot;bell pepper&quot; ... str(stringr::words) ## chr [1:980] &quot;a&quot; &quot;able&quot; &quot;about&quot; &quot;absolute&quot; &quot;accept&quot; &quot;account&quot; ... str(stringr::sentences) ## chr [1:720] &quot;The birch canoe slid on the smooth planks.&quot; ... 16.3 Worksheet To get participation points for today, we’ll be filling out the cm102-exercise.Rmd file. Rmd html. Add this to your participation repo. "],
["functional-programming.html", "Class Meeting 17 (3) Functional Programming 17.1 Announcements 17.2 Worksheet", " Class Meeting 17 (3) Functional Programming — LAST YEAR’S CONTENT BELOW — 17.1 Announcements Homework is posted. Less strict with percentage grades. Watch the Discussion and Discussion-Internal repos to get announcements such as homework releases. 17.2 Worksheet To get participation points for today, we’ll be filling out the cm103-exercise.Rmd file. Rmd html. Add this to your participation repo. "],
["list-columns.html", "Class Meeting 18 (4) List Columns 18.1 Today’s Agenda 18.2 Resources 18.3 Review", " Class Meeting 18 (4) List Columns — LAST YEAR’S CONTENT BELOW — suppressPackageStartupMessages(library(tidyverse)) ## Warning: package &#39;ggplot2&#39; was built under R version 3.5.2 ## Warning: package &#39;tibble&#39; was built under R version 3.5.2 ## Warning: package &#39;purrr&#39; was built under R version 3.5.2 ## Warning: package &#39;dplyr&#39; was built under R version 3.5.2 ## Warning: package &#39;stringr&#39; was built under R version 3.5.2 ## Warning: package &#39;forcats&#39; was built under R version 3.5.2 18.1 Today’s Agenda Today’s lessons are: Review of purrr and piping. Parallel mapping List columns An analysis using both 18.2 Resources All are from Jenny’s purrr tutorial. Specifically: Parallel mapping: Jenny’s “Specifying the function in map() + parallel mapping” List columns in data frames; nesting: Jenny’s “List Columns”. The all-encompassing application near the bottom of the worksheet is from Jenny’s “Sample from groups, n varies by group” 18.3 Review 18.3.1 purrr map(x, f, ...) returns a list with elements: f(x[[1]], ...) f(x[[2]], ...) … map_dbl, map_lgl, etc to return a vector. We can specify a pre-defined f, or write it on-the-fly, or another way that we didn’t touch on last time. Example with “squaring” function: map(x, square) where square &lt;- function(t) t^2; map(x, function(t) t^2); or map(x, ~ (.x)^2) (function variable is .x by convention). 18.3.2 piping: . We know that a %&gt;% b() is the same as b(a). Want to refer to a in addition to the first argument? Specify it as a .. Example: Gotcha: Case 1: LHS (= left-hand side) not put as first argument when . appears in RHS: log(8, base=2) ## [1] 3 ## is identical to... 2 %&gt;% log(8, base=.) ## [1] 3 Case 2: LHS is still put as first argument, even when . appears in RHS: c(ncol(mtcars), nrow(mtcars)) ## [1] 11 32 ## is NOT identical to... 1:10 %&gt;% c(min(.), max(.)) ## [1] 1 2 3 4 5 6 7 8 9 10 1 10 Trick: Use {} to “absorb” the placement of LHS as first argument: 1:10 %&gt;% {c(min(.), max(.))} ## [1] 1 10 18.3.3 Worksheet To get participation points for today, we’ll be filling out the cm104-exercise.Rmd file. Rmd html. Add this to your participation repo. "],
["r-packages-part-i.html", "Class Meeting 19 (5) R Packages, Part I 19.1 Learning Objectives 19.2 Participation 19.3 Resources 19.4 Motivation 19.5 Getting Started 19.6 Let’s start with a single function 19.7 Documentation and Testing 19.8 Higher-level User Documentation 19.9 Adding data to your R package 19.10 Dependencies 19.11 Launching your Package to GitHub 19.12 Time remaining?", " Class Meeting 19 (5) R Packages, Part I — LAST YEAR’S CONTENT BELOW — 19.1 Learning Objectives This tutorial aims to get you started with package development in R. By the end of this tutorial, you’ll have the beginnings of an R package called powers (complete version). You’ll learn about key components of an R package, and how to modify them. We’ll be going over the following topics: set up the directory structure for a package and put it under version control with File -&gt; New Project define functions in R scripts located in the R directory of the package use load_all and Build &amp; Reload to simulate loading the package use Check to check the package for coherence use Build &amp; Reload to properly build and install the package edit the DESCRIPTION file of package metadata specify a LICENSE document and export the functions via roxygen2 comments document the package itself via use_package_doc() create documentation and manage the NAMESPACE file via document() use testthat to implement unit testing use a function from another package via use_package() and syntax like otherpkg::foofunction() connect your local Git repo to a new remote on GitHub via use_github() create a README.md that comes from rendering README.Rmd containing actual usage, via use_readme_rmd() create a vignette via use_vignette() and build it via build_vignettes() 19.2 Participation We’ll be developing the powers R package in class. Please follow along with this, developing in your participation repo. At least, some of the development. Sometimes it might be better to just sit back and watch. I’ll try to inform you when to do what. 19.3 Resources This tutorial is adapted from Jenny Bryan’s STAT 547 tutorial, where she develops the foofactors package. Other resources you might find useful: Hadley’s “R Packages” book. Concise. Works with devtools and friends. Package development cheatsheet “Writing R Extensions”, the official guide to writing R packages. Comprehensive. Doesn’t refer to devtools and friends. Others on specific topics: Karl Broman on choosing a license During exercise periods, in case you’re ahead of the class and have time, you should work on Homework 7. 19.4 Motivation Why make a package in R? Here are just a few big reasons: Built-in checks that your functions are working and are sensible. Easy way to store and load your data – data packages like gapminder are awesome! Allows for documentation of functions that you’ve written. Companion for a journal article you’re writing. Think aid for a type of analysis, not an analysis itself. And an R package does not need to be big! 19.5 Getting Started Install/update the devtools package, used as an aid in package development: install.packages(&quot;devtools&quot;) This will do for now – for development beyond the basics, you might need to further configure your computer. 19.6 Let’s start with a single function 19.6.1 Function creation Follow along as we make an R package called powers that contains a function square that squares its input. Let’s initiate it: RStudio —&gt; New project —&gt; R Package Initiate git (optional, but recommended). Under the “Build” menu, click “Install and Restart” Check out the files that have been created Rd NAMESPACE DESCRIPTION Now, start a new R script in the R directory, called square.R. Write a function called square that squares its input. Build the package: Build and Reload, or in newer versions of RStudio, Install and Restart. This compiles the package, and loads it. Try leaving the project, do library(powers), and use the function! Pretty cool, eh? 19.6.2 Documentation The roxygen2 package makes documentation easy(er). Comment package functions with #' above the function, and use tags starting with @. Let’s document the square function. Key tags: @param – what’s the input? @return – what’s the output? @export – make the function available upon loading the package. Type document() into the console (a function from the devtools package). Then Install and Restart the package. Your function is now documented. Check it out with ?square! This happens due to the creation of an Rd file in the man folder. 19.6.3 Taking control of your NAMESPACE Let’s start being intentional as to what appears in our NAMESPACE. Delete your NAMESPACE file. Add the @export tag to your square function to write it to the NAMESPACE. Things that do not get @exported can still be referred to “internally” by functions in your NAMESPACE, as we’ll see soon. 19.6.4 Checking It’s a good idea to check your package early and often to see that everything is working. Click Check under the Build menu. It checks lots of things for you! We’ll see more examples of this. 19.6.5 Function Dependencies Make another, more general function to compute any power: pow &lt;- function(x, a=2) x^a It can go in the same R script as square, or a different one – your choice. We’ll make square depend on pow. Aftering Install and Restarting, you’ll notice that you can’t use pow because it’s not exported. But, square still works! We call pow an internal function. Note: you should still document your internal function! But mention that the function is internal. Users will be able to access the documentation like normal, but still won’t be able to (easily) use the function. If you want to be able to use internal functions as a developer, but don’t want users to have (easy) access to the functions, then run load_all instead of Install and Restart. 19.6.6 Your Turn Make and document another function, say cube, that raises a vector to the power of 3. Be sure to @export it to the NAMESPACE. Use our internal pow function to make cube, if you have it. Finished early? Do more – work on Assignment 7, and/or try out more documentation features that comes with roxygen2 (the @ tags). 19.7 Documentation and Testing 19.7.1 More Roxygen2 Documentation \\code{} for code font \\link{} to link to other function docs Combine: \\code{\\link{function_name}} Enumeration: #&#39; \\enumerate{ #&#39; \\item first item #&#39; \\item second item #&#39; } Itemization: #&#39; \\itemize{ #&#39; \\item first item #&#39; \\item second item #&#39; } Manually labelled list: #&#39; \\describe{ #&#39; \\item{bullet label 1}{first item} #&#39; \\item{bullet label 2}{second item} #&#39; } 19.7.2 DESCRIPTION file Every R package has this. It contains the package’s metadata. Let’s edit it: Add a title and brief description. R is picky about these! Check out the rules. Add your name. Use the Authors@R field instead of the default Author and Maintainer fields. Pick a license: next! 19.7.3 Pick a license Karl Broman’s post is brief and informative. Let’s add an MIT licence. 19.7.4 Testing with testthat We’ve already seen package Checks – this checks that the pieces of your R package are in place, and that even your examples don’t throw errors. We should not only check that our functions are working, but that they give us results that we’d expect. The testthat package is useful for this. Initialize it in your R package by running use_testthat(). As a template, save and edit the following script in a file called test_square in the tests/testthat folder, filling in the blanks with an expect statement: context(&quot;Squaring non-numerics&quot;) test_that(&quot;At least numeric values work.&quot;, { num_vec &lt;- c(0, -4.6, 3.4) expect_identical(square(numeric(0)), numeric(0)) FILL_THIS_IN }) test_that(&quot;Logicals automatically convert to numeric.&quot;, { logic_vec &lt;- c(TRUE, TRUE, FALSE) FILL_THIS_IN }) Then, you can execute those tests by running devtools::test(), or clicking Build -&gt; Test package. These sanity checks are very important as your R package becomes more complex! 19.8 Higher-level User Documentation 19.8.1 Package Documentation Just like we do for functions, we can make a manual (.Rd) page for our entire R package, too. For example, check out the documentation for ggplot2: ?ggplot2 # Can execute only if `ggplot2` is loaded. package?ggplot2 # Always works. To do so, just execute use_package_doc(). You’ll see a new R script come up with roxygen2-style documentation to NULL. Document as you’d do functions, and run document() to generate the .Rd file. Here’s sample documentation: #&#39; Convenient Computation of Powers #&#39; #&#39; Are you tired of using the power operator, \\code{^} or \\code{**} in R? #&#39; Use this package to call functions that apply common powers #&#39; to your vectors. #&#39; #&#39; @name powers #&#39; @author Me #&#39; @note This package isn&#39;t actually meant to be serious. It&#39;s just for #&#39; teaching purposes. #&#39; @docType package 19.8.2 Vignettes It’s a good idea to write a vignette (or several) for your R package to show how the package is useful as a whole. Documentation for individual functions don’t suffice for this purpose! To write a vignette called &quot;my_vignette&quot;, just run use_vignette(&quot;my_vignette&quot;) Some things happen automatically, but it’s up to you to modify the .Rmd document to provide adequate instruction. Change the template to suit your package. The only real “catch” to doing this is making sure the title is replaced in both instances. Then just Knit, and then run build_vignettes() to build the vignettes. Vignette woes: There seems to be resistance against building vignettes when installing. Try running install(build_vignettes=TRUE) to get it working. 19.8.3 README Just as most projects should have a README file in the main directory, so should an R package. Purposes: Inform someone stumbling across your project what they’ve stumbled across. At a high level (like “This is an R package”), but also somewhat at a lower level too, like your description file. This becomes a little redundant. I like to use the README to inform developers the main workflow and spirit behind developing the package. There are some things that you’d want other potential developers to know about the package as a whole, yet are irrelevant to users! How to do it: You could just make and edit a README.md file like normal. But you’ll probably want to briefly demonstrate some code, so you’ll need an .Rmd. Let devtools set that up for you: use_readme_rmd() knit and you’re done! 19.8.4 Exercises Create the above three types of documentation, without looking at my version. Then compare. Ideally, you’ll have more to document because you’ve been working on expanding this (or another) R package for Homework 07 already. 19.9 Adding data to your R package You can store and document datasets within R packages. Here’s one useful way. Note: This currently doesn’t seem to be present in the companion tutorial from Jenny. Check out the R Packages “data chapter” for a resource. Example: Let’s add tenvec and tendf to the package: tenvec &lt;- 1:10 tendf &lt;- data.frame(vec=1:10) In the console: Store your data as R objects, as we’ve done above with tenvec and tendf. Execute use_data(tenvec, tendf) (one argument per object). tenvec and tendf will be saved as .Rdata files in the new /data directory. These are available upon loading the package. To document the data, for each object (i.e., for each of tenvec and tendf), put roxygen2-style documentation above the character &quot;tenvec&quot; and &quot;tendf&quot; in an R script in the /R folder. Example for tenvec: #&#39; Integer vector from 1 to 10 #&#39; #&#39; Self-explanatory! #&#39; #&#39; @format What format does you data take? Integer vector. #&#39; @source Where did the data come from? &quot;tenvec&quot; The @format and @source tags are unique to data documentation. Note that you shouldn’t use the @export tag when documenting data! 19.10 Dependencies We can use functions from other R packages within our homemade R package, too. We need to do two things: Use the syntax package_name::function_name() whenever you want to use function_name from package_name. Indicate that your R package depends on package_name in the DESCRIPTION file by executing the command use_package(&quot;package_name&quot;). There are other methods, but this is the easiest. Example: Add ggplot2 dependency to plot the resulting computations. Do so by adding a plot to pow – change pow’s guts to the following: res &lt;- x^p if (showplot) { p &lt;- ggplot2::qplot(x, res) print(p) } res Note 1: Here’s an example of the benefits of not having your functions do too much – I only needed to change pow alone to get the changes to work for square and cube. Note 2: It’s probably better to use Base R’s plotting here, so that your package is as stand-alone as possible. We use ggplot2 for expository purposes. 19.11 Launching your Package to GitHub If I want to put an R package on GitHub, I typically just: Click “New” in GitHub to make a new repo. Don’t initialize with README. Follow the instructions github provides, which involves two lines to execute in the terminal. Those two lines can be found here in Jenny’s Happy git book. There is also the use_github() way – although, to me, it seems overly complicated (perhaps there’s an advantage I don’t know about). It’s just a matter of following the instructions, which are not worth demonstrating here. 19.12 Time remaining? If there’s time remaining, we’ll check out S3 OO programming in R. Add a “class” to the output of pow. Add some methods: print.pow &lt;- function(x) { cat(paste(&quot;Object of class &#39;pow&#39;,&quot;, head(x))) invisible() } #&#39; @export bind.pow &lt;- function(x) paste(x, collapse=&quot;.&quot;) bind &lt;- function(x) UseMethod(&quot;bind&quot;) "],
["r-packages-part-ii.html", "Class Meeting 20 (6) R Packages, Part II", " Class Meeting 20 (6) R Packages, Part II — LAST YEAR’S CONTENT BELOW — Continuation of cm105 starting at 7.4: Testing with testthat. "],
["dashboarding-part-i.html", "Class Meeting 21 (7) Dashboarding, Part I 21.1 Orientation 21.2 Why use shiny? 21.3 Getting Started with shiny 21.4 Intro to the UI 21.5 Intro to the server 21.6 Inputs / Control Widgets 21.7 Linking Inputs to Outputs 21.8 Reactivity 21.9 The Concept of Reactivity 21.10 More shiny features 21.11 Hosting your shiny app: shinyapps.io", " Class Meeting 21 (7) Dashboarding, Part I — LAST YEAR’S CONTENT BELOW — 21.1 Orientation 21.1.1 Objective This tutorial is intended to introduce shiny in a classroom setting. This tutorial is intended to provide students a foundation in shiny, with the expectation that students will be able to: develop basic shiny apps from scratch, deploy a shiny app, create interactive Shiny R Markdown documents, and research more advanced shiny techniques. 21.1.2 Resources This tutorial is an abridged version of the stat545.com shiny tutorial written by Dean Attali, with some minor differences/rearrangements. (I think) the stat545.com tutorial is identical to the tutorial on Dean’s website. The official shiny site is also very useful. It has tutorials, a gallery, and other goodies. Specific topics: For Shiny R Markdown documents, see Chapter 19 of Yihui’s R Markdown book. For deploying shiny apps, see shinyapps.io. 21.1.3 Participation We’ll be making an external product, like last week. This week we’ll be making a shiny app out of the BC liquor data (loaded in later). Complete version by Dean Attali here. 21.2 Why use shiny? When presenting your analysis: respond to others’ “what if”s. Both in-person meetings and written analyses. “There’s an app for that”, and you can make it with shiny. Could even provide a user interface to your R package. Could even make a website out of shiny, like this New Zealand Tourism website. 21.3 Getting Started with shiny 21.3.1 Together: Install shiny, and load it: install.packages(&quot;shiny&quot;) library(shiny) Start a new shiny app. “File -&gt; New File -&gt; shiny web app -&gt; Single file”. Notice: app.R is made in a new folder. Shiny app needs ui and server. Run with shinyApp(ui, server) – or, click “Run App” (appears if server and shinyApp() are present) Delete the “guts” of ui and server. 21.4 Intro to the UI 21.4.1 HTML: Aside Did you know webpages are made up of HTML? Find the “view source” button on your browser! 21.4.2 HTML: My Turn Character entries in ui displayed as-is. Can add HTML. I’ll add a level-1 header in three ways: tags object Some of the tags are available as functions, too, like h1(). HTML() function for generic HTML. You can nest tags, too: h1(em(&quot;This is my header.&quot;)) Code before the ui gets run, too, and can be read by the ui. Let’s see! 21.4.3 HTML: Your Turn Try using three tags in the ui, aside from h1 and em. Find the documentation for them here (links to official shiny site). 21.4.4 Download the data: Together Dean Attali has prepared a tidy data set as a .csv here. Save this csv to your app’s folder as bcl-data.csv. Read the file in by placing this code below the loading of shiny: bcl &lt;- read.csv(&quot;bcl-data.csv&quot;, stringsAsFactors = FALSE) Explore the data. We’ll use this later. 21.4.5 Layouts: Together We usually place content in panels, arranged in layouts. Most common: sidebarLayout(). Requires two arguments: sidebarPanel() (column, 1/6 of the page) mainPanel() (column, 5/6 of the page) Grid layout with fluidRow() and column() (this is more generic; provides more control) To the ui, let’s copy the below code, which gives the app a title with titlePanel(), and gives the app a sidebarlayout. titlePanel(&quot;BC Liquor price app&quot;, windowTitle = &quot;BCL app&quot;), sidebarLayout( sidebarPanel(&quot;This text is in the sidebar.&quot;), mainPanel(&quot;This text is in the main panel.&quot;) ) Want more info on layouts? See shiny.rstudio.com’s layouts page. 21.4.6 Overall look at the ui: My Turn Check out the ui object after running it. It’s just HTML! 21.5 Intro to the server 21.5.1 Displaying output: My Turn Try to display a plot in the ui – a histogram of price, with ggplot2::qplot(bcl$Price). It won’t work. Remove it! The shiny processing flow is as follows: Run code in server. Display output in ui. We’ll do this backwards. 21.5.2 Displaying output, ui side: Together Let’s create a placeholder for the output in the ui. The *Output() family of functions helps us with this; in this case, plotOutput(). Common required argument: a unique outputId for identification. Add plotOutput() with the ID &quot;price_hist&quot;, to the main panel in the ui. Run the app to see nothing has happened. 21.5.3 Displaying output, server side: Together About: The output argument of our server() function (below ui) is a named list (actually, “list-like”) that we define, with names corresponding to the ID’s in the *Output() functions found in ui. Each component must contain the output of a render*() function; in this case, renderPlot(). This is allowed to have R code. Let’s put in the missing piece to making the histogram by adding a line to the server() function: Add an entry: output$price_hist. Make the entry the output of renderPlot(), whose input is the plotting code ggplot2::qplot(bcl$Price). 21.5.4 Displaying output: Your Turn Use what you’ve learned about outputs to display a table of the BC Liquor data below the plot. Hints: You’ll need renderTable() and tableOutput() – but where? Don’t forget to add a comma within the mainPanel() function when adding a new line, but NOT when defining the server() function! (Why?) 21.6 Inputs / Control Widgets 21.6.1 Inputs / Control Widgets: Together Inputs /control widgets allow the user to specify input. Example: sliderInput(). Full list available at the shiny.rstudio.com control widgets tutorial. Arguments for all widgets: inputId – unique identifier. label – “title” to the widget. others specific to the widget. Add this slider to the sidebar panel so that the user can select a price range: sliderInput(&quot;priceInput&quot;, &quot;Select your desired price range.&quot;, min = 0, max = 100, value = c(15, 30), pre=&quot;$&quot;) View the app. Note that the widgets aren’t yet linked to the outputs (graph and table)! 21.6.2 Inputs / Control Widgets: Your Turn Add another widget to the sidebar panel: Should be a radio button widget for users to select one type of beverage, with options given in the vector below: c(&quot;BEER&quot;, &quot;REFRESHMENT&quot;, &quot;SPIRITS&quot;, &quot;WINE&quot;) Give the widget an ID called &quot;typeInput&quot;. 21.7 Linking Inputs to Outputs 21.7.1 Table example: Together About: The input argument of our server() function is (like output) also a named list (actually, “list-like”). Its names are the widget ID’s, and comes “pre-made” after having defined widgets. So: Our widget ID’s currently: &quot;priceInput&quot;, a slider. &quot;typeInput&quot;, a radio button. The corresponding inputs: input$priceInput: a numeric vector of length 2 with the lower and upper selected range. input$typeInput: a character vector of length 1 with the drink type. Let’s use dplyr to filter the table using columns Price and Type: Load tidyverse at the top of the script. Filter the data in the renderTable() function. Run the app. Notice the live-updating of the table after interacting with a widget. This is called reactive programming. 21.7.2 Plot Example: Your Turn Modify the plot so that it only shows the filtered data. 21.8 Reactivity 21.9 The Concept of Reactivity Will the following code output 15 or 25? x &lt;- 10 y &lt;- x + 5 x &lt;- 20 print(y) This is non-reactive programming. Shiny is an exception! Where is the reactivity in Shiny? 21.9.1 Defining reactive variables: Together Can you spot the duplicate code in our app thus far? Use reactive() to prevent duplicated code: Save wrangled data to a variable after passing through reactive() Use this object instead of the duplicated code. Catch: treat the output like it’s a function by putting () next to it. 21.10 More shiny features This concludes the “foundation of shiny”. Let’s take a look at other things we can do with shiny. 21.10.1 uiOutput() and renderUI() You can conditionally have UI appear as output. See an example in Section 11.1 of Dean’s tutorial. 21.11 Hosting your shiny app: shinyapps.io You can host your app as a website for free at www.shinyapps.io (or on your own server) – just follow the instructions. Or, see Section 13.1 in Dean’s tutorial for elaboration. 21.11.1 Interactive Rmd Just pop runtime: shiny in the YAML header of an Rmd file, and your ready to generate interactive HTML-based documents. See an example in Section 14.1 of Dean’s tutorial. For an elaboration, see Chapter 19 of Yihui’s R Markdown book. 21.11.2 Interacting with plots We can allow users to click on a graph to indicate input. See this RStudio page for a description. 21.11.3 DT tables Display your tables in a nicer / less static way with DT tables. 21.11.4 Shiny looks You can change the look of your shiny app with shinythemes. You can use the shinydashboard package for a more “website-like functionality”. "],
["dashboarding-part-i-1.html", "Class Meeting 22 (8) Dashboarding, Part I", " Class Meeting 22 (8) Dashboarding, Part I — LAST YEAR’S CONTENT BELOW — Agenda: Comments between pipes Review code for BCL app that we developed last time Continuation of the tutorial from last time. "],
["automation-part-i.html", "Class Meeting 23 (9) Automation, Part I 23.1 Why Automate?", " Class Meeting 23 (9) Automation, Part I — LAST YEAR’S CONTENT BELOW — 23.1 Why Automate? Because you’re going to have to rerun your analysis. This can be a pain if you have multiple files and scripts! According to Shaun Jackman and Jenny Bryan: Automate a pipeline … to reproduce previous results. … to recreate results deleted by fat fingers. … to rerun the pipeline with updated software. … to run the same pipeline on a new data set. "],
["non-interactive-programming.html", "Class Meeting 24 Non-interactive programming 24.1 Pipelines 24.2 Test Drive Make 24.3 Makefile Structure 24.4 LOTR Pipeline Examples", " Class Meeting 24 Non-interactive programming Run an R script from top to bottom: source()/“source” button rmarkdown::render()/“knit” button Rscript, Rscript -e. 24.1 Pipelines Let’s take a look at Shaun Jackman’s slides (scroll down). 24.2 Test Drive Make Complete the “Test drive make” activity to see if you have make installed. Windows machines: Some options for installation. If you installed Rtools when making R packages, you might have make installed already. Commentary is here; installation is found here. If not, see this special consideration for windows. 24.3 Makefile Structure Each block of code in a Makefile is called a rule, it looks something like this: file_to_create: files.it depends.on like_this.R code to be run in the command line that can have multiple lines of code Rscript like_this.R file_to_create is a target, a file to be created, or built. files.it, depends.on, and like_this.R are dependencies, files which are needed to build or update the target. Targets can have zero or more dependencies. : separates targets from dependencies. code to be run in the command line, …, Rscript like_this.R are actions, commands to run to build or update the target using the dependencies. Targets can have zero or more actions. Actions are indented using the TAB character, not spaces. Together, the target, dependencies, and actions form a rule. (Thanks to contributions from Tiffany Timbers here!) 24.4 LOTR Pipeline Examples We’ll look at 3 pipelines that do the same thing in different ways: get data -&gt; clean data -&gt; extract relevant data. 24.4.1 Download Download the cm109-automation_examples.zip file to your participation folder for today, and unzip it. Alternatively: get it unzipped from github. 24.4.2 Test out the automation We’ll test out the functionality of each pipeline, guided by suggestions from the README’s of each activity. Overall goal: run the pipeline for each activity. "],
["automation-part-ii.html", "Class Meeting 25 (10) Automation, Part II 25.1 Review 25.2 make pipeline activity", " Class Meeting 25 (10) Automation, Part II — LAST YEAR’S CONTENT BELOW — 25.1 Review Last time, we saw: Running R scripts using R, vs using the terminal Running Rmd scripts using R, vs using the terminal Makefile “rule” structure Running make The three LOTR pipelines acted as a proof of concept. Today, we’ll make our own Makefile and pipeline. 25.2 make pipeline activity We’ll follow along with Shaun and Jenny’s make tutorial. "],
["getting-data-from-the-web-scraping.html", "Class Meeting 26 (11) Getting Data from the Web: scraping", " Class Meeting 26 (11) Getting Data from the Web: scraping — LAST YEAR’S CONTENT BELOW — "],
["getting-data-from-the-web-apis.html", "Class Meeting 27 (12) Getting Data from the Web: API’s", " Class Meeting 27 (12) Getting Data from the Web: API’s — LAST YEAR’S CONTENT BELOW — "]
]
